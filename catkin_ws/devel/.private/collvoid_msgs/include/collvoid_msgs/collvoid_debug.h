// Generated by gencpp from file collvoid_msgs/collvoid_debug.msg
// DO NOT EDIT!


#ifndef COLLVOID_MSGS_MESSAGE_COLLVOID_DEBUG_H
#define COLLVOID_MSGS_MESSAGE_COLLVOID_DEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3Stamped.h>
#include <nav_msgs/Odometry.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/PoseStamped.h>

namespace collvoid_msgs
{
template <class ContainerAllocator>
struct collvoid_debug_
{
  typedef collvoid_debug_<ContainerAllocator> Type;

  collvoid_debug_()
    : header()
    , run(0)
    , cmd_vel()
    , holo_vel()
    , odom()
    , ground_truth()
    , located_pose()
    , loc_error(0.0)
    , radius_uncertainty(0.0)  {
    }
  collvoid_debug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , run(0)
    , cmd_vel(_alloc)
    , holo_vel(_alloc)
    , odom(_alloc)
    , ground_truth(_alloc)
    , located_pose(_alloc)
    , loc_error(0.0)
    , radius_uncertainty(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _run_type;
  _run_type run;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;

   typedef  ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  _holo_vel_type;
  _holo_vel_type holo_vel;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _odom_type;
  _odom_type odom;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _ground_truth_type;
  _ground_truth_type ground_truth;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _located_pose_type;
  _located_pose_type located_pose;

   typedef float _loc_error_type;
  _loc_error_type loc_error;

   typedef float _radius_uncertainty_type;
  _radius_uncertainty_type radius_uncertainty;




  typedef boost::shared_ptr< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> const> ConstPtr;

}; // struct collvoid_debug_

typedef ::collvoid_msgs::collvoid_debug_<std::allocator<void> > collvoid_debug;

typedef boost::shared_ptr< ::collvoid_msgs::collvoid_debug > collvoid_debugPtr;
typedef boost::shared_ptr< ::collvoid_msgs::collvoid_debug const> collvoid_debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collvoid_msgs::collvoid_debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace collvoid_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'collvoid_msgs': ['/home/anton/catkin_ws/src/collvoid/collvoid_msgs/msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a304cee99f1657d40961f7cc6bca76f7";
  }

  static const char* value(const ::collvoid_msgs::collvoid_debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa304cee99f1657d4ULL;
  static const uint64_t static_value2 = 0x0961f7cc6bca76f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collvoid_msgs/collvoid_debug";
  }

  static const char* value(const ::collvoid_msgs::collvoid_debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 run\n\
geometry_msgs/Twist cmd_vel\n\
geometry_msgs/Vector3Stamped holo_vel\n\
nav_msgs/Odometry odom\n\
nav_msgs/Odometry ground_truth\n\
geometry_msgs/PoseStamped located_pose\n\
float32 loc_error\n\
float32 radius_uncertainty\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Vector3Stamped\n\
# This represents a Vector3 with reference coordinate frame and timestamp\n\
Header header\n\
Vector3 vector\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
";
  }

  static const char* value(const ::collvoid_msgs::collvoid_debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.run);
      stream.next(m.cmd_vel);
      stream.next(m.holo_vel);
      stream.next(m.odom);
      stream.next(m.ground_truth);
      stream.next(m.located_pose);
      stream.next(m.loc_error);
      stream.next(m.radius_uncertainty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct collvoid_debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collvoid_msgs::collvoid_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collvoid_msgs::collvoid_debug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "run: ";
    Printer<int32_t>::stream(s, indent + "  ", v.run);
    s << indent << "cmd_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
    s << indent << "holo_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3Stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.holo_vel);
    s << indent << "odom: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.odom);
    s << indent << "ground_truth: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.ground_truth);
    s << indent << "located_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.located_pose);
    s << indent << "loc_error: ";
    Printer<float>::stream(s, indent + "  ", v.loc_error);
    s << indent << "radius_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.radius_uncertainty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLVOID_MSGS_MESSAGE_COLLVOID_DEBUG_H
